var Hyperloop=require("hyperloop"),EnclosingClass=require("java.util.AbstractMap"),SimpleImmutableEntry=function(){var e;e=1==arguments.length&&arguments[0].isNativeProxy&&arguments[0].isInstanceProxy&&arguments[0].isInstanceOf("java.util.AbstractMap$SimpleImmutableEntry")?arguments[0]:SimpleImmutableEntry.class.newInstance(arguments),this.$native=e,this._hasPointer=null!=e,this._private={}},SuperClass=require("java.lang.Object");SimpleImmutableEntry.prototype=Object.create(SuperClass.prototype),SimpleImmutableEntry.prototype.constructor=SimpleImmutableEntry,Object.defineProperty(SimpleImmutableEntry.prototype,"super",{get:function(){return this._hasPointer?new SimpleImmutableEntry(this.$native.super):null},enumerable:!0}),SimpleImmutableEntry.className="java.util.AbstractMap$SimpleImmutableEntry",SimpleImmutableEntry.prototype.className="java.util.AbstractMap$SimpleImmutableEntry",Object.defineProperty(SimpleImmutableEntry,"class",{get:function(){return Hyperloop.getClass("java.util.AbstractMap$SimpleImmutableEntry")},enumerable:!0,configurable:!1}),SimpleImmutableEntry.extend=function(e){var t=Hyperloop.extend("java.util.AbstractMap$SimpleImmutableEntry"),n=function(){function n(e){if(e.apiName&&e.isNativeProxy&&e.isInstanceProxy){var t=require(e.apiName);return new t(e)}return e}function r(){for(var e=[],t=0;t<arguments.length;t++)e[t]=n(arguments[t]);return e}var i=t.newInstance(arguments),a=this,o=e,l={};Object.keys(o).forEach(function(e){a[e]=function(){return o[e].apply(a,arguments)},l[e]=function(){return a[e].apply(a,r.apply(this,arguments))}}),i.setOverrides(l),this.$native=i,this._hasPointer=null!=i,this._private={}};return n.prototype=Object.create(SimpleImmutableEntry.prototype),n.prototype.constructor=n,n},SimpleImmutableEntry.cast=function(e){return e.$native&&e.$native.isInstanceProxy?new SimpleImmutableEntry(Hyperloop.cast("java.util.AbstractMap$SimpleImmutableEntry",e.$native)):e},SimpleImmutableEntry.prototype.getKey=function(){if(!this._hasPointer)return null;var e=this.$native.callNativeFunction({func:"getKey",instanceMethod:!0,args:Array.prototype.slice.call(arguments)});if(null==e)return null;if(e.apiName){if("java.util.AbstractMap$SimpleImmutableEntry"===e.apiName)return new SimpleImmutableEntry(e);var t=require(e.apiName);return new t(e)}return e},SimpleImmutableEntry.prototype.getValue=function(){if(!this._hasPointer)return null;var e=this.$native.callNativeFunction({func:"getValue",instanceMethod:!0,args:Array.prototype.slice.call(arguments)});if(null==e)return null;if(e.apiName){if("java.util.AbstractMap$SimpleImmutableEntry"===e.apiName)return new SimpleImmutableEntry(e);var t=require(e.apiName);return new t(e)}return e},SimpleImmutableEntry.prototype.hashCode=function(){if(!this._hasPointer)return null;var e=this.$native.callNativeFunction({func:"hashCode",instanceMethod:!0,args:Array.prototype.slice.call(arguments)});if(null==e)return null;if(e.apiName){if("java.util.AbstractMap$SimpleImmutableEntry"===e.apiName)return new SimpleImmutableEntry(e);var t=require(e.apiName);return new t(e)}return e},SimpleImmutableEntry.prototype.setValue=function(){if(!this._hasPointer)return null;var e=this.$native.callNativeFunction({func:"setValue",instanceMethod:!0,args:Array.prototype.slice.call(arguments)});if(null==e)return null;if(e.apiName){if("java.util.AbstractMap$SimpleImmutableEntry"===e.apiName)return new SimpleImmutableEntry(e);var t=require(e.apiName);return new t(e)}return e},SimpleImmutableEntry.prototype.equals=function(){if(!this._hasPointer)return null;var e=this.$native.callNativeFunction({func:"equals",instanceMethod:!0,args:Array.prototype.slice.call(arguments)});if(null==e)return null;if(e.apiName){if("java.util.AbstractMap$SimpleImmutableEntry"===e.apiName)return new SimpleImmutableEntry(e);var t=require(e.apiName);return new t(e)}return e},SimpleImmutableEntry.prototype.toString=function(){if(!this._hasPointer)return null;var e=this.$native.callNativeFunction({func:"toString",instanceMethod:!0,args:Array.prototype.slice.call(arguments)});if(null==e)return null;if(e.apiName){if("java.util.AbstractMap$SimpleImmutableEntry"===e.apiName)return new SimpleImmutableEntry(e);var t=require(e.apiName);return new t(e)}return e},module.exports=SimpleImmutableEntry;